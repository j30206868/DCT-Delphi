function dctConst(value, Nstep: Integer): double;
begin
    if value = 0 then
    begin
        result := sqrt( 1.0/Nstep );
    end
    else
    begin
        result := sqrt( 2.0/Nstep );
    end;
end;

function pixelGuard(value: Integer):Integer;
begin
    if value > 255 then
    begin
        result := 255;
    end
    else if value < 0 then
    begin
        result := 0;
    end
    else
    begin
        result := value;
    end;
end;

function dctCosX(x, u, xN: Integer; pi: double): double;
begin
    result := cos( ( pi*(2*x+1)*u )/(2.0*xN) );
end;

function dctCosY(y, v, yN: Integer; pi: double): double;
begin
    result := cos( ( pi*(2*y+1)*v )/(2.0*yN) );
end;

procedure dctMatrixToBmp(dctMatrix: TDouble2DArray; bmp: TBitmap; bpp: Integer);
var
    x, y, xIdx, pixelV: Integer;
    SL: PByteArray;
begin
    for y:=0 to bmp.Height-1 do
    begin
        SL := bmp.ScanLine[y];

        for x:=0 to bmp.Width-1 do
        begin
            xIdx := x * bpp;
            pixelV := pixelGuard(Round(dctMatrix[x][y]));
            SL[xIdx] := pixelV;
            SL[xIdx + 1] := pixelV;
            SL[xIdx + 2] := pixelV;
        end;
    end;
end;

procedure dctTypeIIBlockCalc(sX, sY, xN, yN: Integer; tarBmp: TBitmap ; var dctMatrix: TDouble2DArray ; bpp: Integer);
var
    pi: Double;
    u, v, x, y: Integer;
    tarPV, uIdx, xIdx: Integer;
    sum: Double;
    tarSL: PByteArray;
begin
    pi := 3.14159;

    for v:=0 to yN-1 do
    begin
        for u:=0 to xN-1 do
        begin
            sum := 0;

            for y:=0 to yN-1 do
            begin
                tarSL := tarBmp.ScanLine[y + sY];

                for x:=0 to xN-1 do
                begin
                    xIdx := (x + sX) * bpp;
                    tarPV := tarSL[xIdx];
                    sum := sum + tarPV * dctCosX(x, u, xN, pi) * dctCosY(y, v, yN, pi);
                end;
            end;

            dctMatrix[u + sX][v + sY] := dctConst(u, xN) * dctConst(v, yN) * sum;
        end;
    end;
end;

procedure idctTypeIIBlockCalc(sX, sY, xN, yN: Integer; bufBmp: TBitmap ; dctMatrix: TDouble2DArray ; bpp: Integer);
var
    pi: Double;
    u, v, x, y: Integer;
    bufPV, xIdx: Integer;
    sum: Double;
    bufSL: PByteArray;
begin
    pi := 3.14159;

    for y:=0 to yN-1 do
    begin
        bufSL := bufBmp.ScanLine[y + sY];

        for x:=0 to xN-1 do
        begin
            sum := 0;

            for v:=0 to yN-1 do
            begin
                for u:=0 to xN-1 do
                begin
                    sum := sum + dctConst(u, xN) * dctConst(v, yN) * dctMatrix[u + sX][v + sY] * dctCosX(x, u, xN, pi) * dctCosY(y, v, yN, pi);
                end;
            end;

            bufPV := Round( sum );
            //bufPV := pixelGuard(bufPV);
            xIdx := (x + sX) * bpp;

            bufSL[xIdx]   := bufPV;
            bufSL[xIdx+1] := bufPV;
            bufSL[xIdx+2] := bufPV;
        end;
    end;
end;

procedure dctTypeII(tarBmp: TBitmap ; dctMatrix: TDouble2DArray ; xN, yN, bpp: Integer);
var
    xS, yS: Integer;
    wBorder, hBorder: Integer;
begin
    wBorder := Round((tarBmp.Width mod xN) / 2.0);
    hBorder := Round((tarBmp.Height mod yN) / 2.0);

    xS := wBorder;

    while (xS < tarBmp.Width-xN) do
    begin
        yS := hBorder;

        while (yS < tarBmp.Height-yN) do
        begin
            dctTypeIIBlockCalc(xS, yS, xN, yN, tarBmp, dctMatrix, bpp);

            //繼續此column的下一個block
            yS := yS + yN;
        end;

        //繼續此row的下一個block
        xS := xS + xN;
    end;
end;

procedure idctTypeII(tarBmp: TBitmap ; dctMatrix: TDouble2DArray ; xN, yN, bpp: Integer);
var
    xS, yS: Integer;
    wBorder, hBorder: Integer;
begin
    wBorder := Round((tarBmp.Width mod xN) / 2.0);
    hBorder := Round((tarBmp.Height mod yN) / 2.0);

    xS := wBorder;

    while (xS < tarBmp.Width-xN) do
    begin
        yS := hBorder;

        while (yS < tarBmp.Height-yN) do
        begin
            idctTypeIIBlockCalc(xS, yS, xN, yN, tarBmp, dctMatrix, bpp);

            //繼續此column的下一個block
            yS := yS + yN;
        end;

        //繼續此row的下一個block
        xS := xS + xN;
    end;
end;

procedure cloneImgSetting(var clonee:TImage; template:TImage);
begin
     clonee := TImage.Create(Form1);
     clonee.Picture.Bitmap.PixelFormat := template.Picture.Bitmap.PixelFormat;
     clonee.Picture.Bitmap.Width := template.Picture.Bitmap.Width;
     clonee.Picture.Bitmap.Height := template.Picture.Bitmap.Height;
end;
